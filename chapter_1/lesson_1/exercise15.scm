(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

;;; 1) сколько раз вызывается процедура `p` при вычислении `(sine 12.15)`?
;;; 2) каковы порядки роста в терминах количества шагов и используемой памяти,
;;;    для процесса, порождаемого процедурой `sine` при вычислении `(sine a)`?

;;;   Функция `sine` при исполнении уходит в глубь стека деля раз за разом `angle` на 3,
;;; пока `angle` больше `0.1`. При этом количество вызовов `p` всегда равно количеству 
;;; вызовов `sine` - 1. 
;;;   Так же `sine` оставляет отложенным вычисление `(p (sine (/ angle 3.0)))`.
;;; Соответственно количество выделяемой памяти функцией `(sine a)` равно q * (n - 1),
;;; где q - константа обозначающая память необходимую на один вызов `sine`,
;;; а n - количество рекурсивных вызовов `sine`.
;;;   Так же заметим, что `angle` убывает каждый вызов согласно формуле `angle` / 3,
;;; тогда в n-ный вызов `sine` `angle[n]` равен `angle` / 3^n. Рекурсивные вызовы заканчиваются,
;;; когда `angle[n]` <= 0.1. Для определения n нужно найти корень уравнения -
;;; `angle` / 3^n = 0.1 
;;; 3^n = `angle` / 0.1
;;; 3^n = `angle` * 10
;;; n - наименьшее натуральное число, которое больше x, где x = log 3 (`angle` * 10)
;;; для `angle` = 12.15    n = 5